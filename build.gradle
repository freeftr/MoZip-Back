plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.1'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.asciidoctor.jvm.convert' version "3.3.2"
}

group = 'com.ssafy'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	asciidoctorExt
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// Spring Boot Starter Web
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// Lombok (컴파일 시 자동으로 처리)
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Spring Boot Test Dependencies
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// Spring Data Redis and JPA
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'mysql:mysql-connector-java:8.0.32'

	// JWT Dependencies
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// QueryDSL (JPA Querying)
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// Spring Rest Docs for API Documentation
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
}

test {
	useJUnitPlatform()
}

ext {
	snippetsDir = file ('build/generated-snippets')
}

test {
	useJUnitPlatform()
	outputs.dir snippetsDir
}

asciidoctor {
	inputs.dir snippetsDir
	baseDirFollowsSourceFile()
	configurations 'asciidoctorExt'
	dependsOn test
}

asciidoctor.doFirst {
	delete file ('src/main/resources/static/docs')
}

tasks.register('copyDoc', Copy) {
	dependsOn asciidoctor
	from file("build/docs/asciidoc")
	into file("src/main/resources/static/docs")
}

build {
	dependsOn copyDoc
}

tasks.register('copyYml', Copy) {
	from "./config/yml/main"
	include "*.yml"
	into "./src/main/resources"
}

tasks.register('copyTestYml', Copy) {
	from "./config/yml/test"
	include "*.yml"
	into "./src/test/resources"
}

processResources.dependsOn('copyYml')
processTestResources.dependsOn('copyTestYml')